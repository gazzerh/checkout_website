variables:
  PLAN: $CI_PROJECT_DIR/plan.tfplan

  DOCKER_IMAGE_NAME: $AWS_REGISTRY_URL/$CI_PROJECT_NAME

stages:
  - build
  - validate
  - plan
  - apply

build:
  stage: build
  tags:
    - shell
  before_script:
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - aws ecr get-login-password --region $AWS_REGION | docker login -u AWS --password-stdin $DOCKER_IMAGE_NAME
  script:
    - docker build -t $DOCKER_IMAGE_NAME:$CI_COMMIT_TAG .
    - docker push $DOCKER_IMAGE_NAME:$CI_COMMIT_TAG
  only:
    - tags

validate:
  stage: validate
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  before_script:
    - apk add curl
    - rm -rf .terraform
    - terraform --version
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - cd ./infra
    - terraform init
  tags:
    - terraform-aws
  script:
    - terraform validate
    - terraform fmt -check=true
  only:
    - branches

merge review:
  stage: plan
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  before_script:
    - apk add curl
    - rm -rf .terraform
    - terraform --version
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - cd ./infra
    - terraform init
  tags:
    - terraform-aws
  script:
    - terraform plan -out=$PLAN
    - echo \`\`\`diff > plan.txt
    - terraform show -no-color ${PLAN} | tee -a plan.txt
    - echo \`\`\` >> plan.txt
    - sed -i -e 's/  +/+/g' plan.txt
    - sed -i -e 's/  ~/~/g' plan.txt
    - sed -i -e 's/  -/-/g' plan.txt
    - MESSAGE=$(cat plan.txt)
    - >-
      curl -X POST -g -H "PRIVATE-TOKEN: ${GITLAB_TOKEN}" 
      --data-urlencode "body=${MESSAGE}" 
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}/discussions"
  artifacts:
    name: plan
    paths:
      - $PLAN
  only:
    - merge_requests

plan production:
  stage: plan
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  before_script:
    - apk add curl
    - rm -rf .terraform
    - terraform --version
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - cd ./infra
    - terraform init
  tags:
    - terraform-aws
  script:
    - terraform plan -out=$PLAN
  artifacts:
    name: plan
    paths:
      - $PLAN
  only:
    - master

apply:
  stage: apply
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - "/usr/bin/env"
      - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  before_script:
    - apk add curl
    - rm -rf .terraform
    - terraform --version
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - cd ./infra
    - terraform init
  tags:
    - terraform-aws
  script:
    - terraform apply -input=false $PLAN
  dependencies:
    - plan production
  only:
    - master
  when: manual

default:
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
      - apk add curl
      - rm -rf .terraform
      - terraform --version
      - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      - eval $(aws ecr get-login --no-include-email)
      - cd ./infra
      - terraform init

variables:
    PLAN: $CI_PROJECT_DIR/plan.tfplan

stages:
    - build
    - validate
    - plan
    - apply

build:
  stage: build
  tags:
    - shell
  before_script:
      - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
      - eval $(aws ecr get-login --no-include-email)
  script:
    - docker build -t 425045515529.dkr.ecr.eu-west-2.amazonaws.com/checkout_webapp:$CI_COMMIT_TAG .
    - docker push 425045515529.dkr.ecr.eu-west-2.amazonaws.com/checkout_webapp:$CI_COMMIT_TAG
  only:
    - tags

validate:
    stage: validate
    tags:
    - terraform-aws
    script:
      - terraform validate
      - terraform fmt -check=true
    only:
      - branches

merge review:
   stage: plan
   tags:
   - terraform-aws
   script:
     - terraform plan -out=$PLAN
     - echo \`\`\`diff > plan.txt
     - terraform show -no-color ${PLAN} | tee -a plan.txt
     - echo \`\`\` >> plan.txt
     - sed -i -e 's/  +/+/g' plan.txt
     - sed -i -e 's/  ~/~/g' plan.txt
     - sed -i -e 's/  -/-/g' plan.txt
     - MESSAGE=$(cat plan.txt)
     - >-
       curl -X POST -g -H "PRIVATE-TOKEN: ${GITLAB_TOKEN}" 
       --data-urlencode "body=${MESSAGE}" 
       "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}/discussions"
   artifacts:
     name: plan
     paths:
       - $PLAN
   only:
     - merge_requests

plan production:
  stage: plan
  tags:
  - terraform-aws
  script:
    - terraform plan -out=$PLAN
  artifacts:
    name: plan
    paths:
      - $PLAN
  only:
    - master
      
apply:
  stage: apply
  tags:
  - terraform-aws
  script:
    - terraform apply -input=false $PLAN
  dependencies:
    - plan production
  only:
    - master
  when: manual
  